{
  "fileTypes": [
    "yul",
    "yulp"
  ],
  "name": "Yul",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "patterns": [
    {
      "comment": "Comments",
      "match": "\\/\\/.*",
      "name": "comment"
    },
    {
      "begin": "(\\/\\*)",
      "comment": "Multiline comments",
      "end": "(\\*\\/)",
      "name": "comment"
    },
    {
      "captures": {
        "2": {
          "name": "entity.name.function"
        }
      },
      "comment": "Events",
      "match": "\\b(event|enum)\\s+([A-Za-z_]\\w*)\\b",
      "name": "keyword"
    },
    {
      "begin": "\\b(object)\\s+(\\\"[A-Za-z_]\\w*\\\")(?:\\s+(is)\\s+)?",
      "beginCaptures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "string.quoted"
        },
        "3": {
          "name": "keyword"
        }
      },
      "end": "\\{",
      "name": "scope",
      "patterns": [
        {
          "match": "\\\"[A-Za-z_]\\w*\\\"",
          "name": "string.quoted"
        },
        {
          "include": "#numbers"
        }
      ]
    },
    {
      "captures": {
        "2": {
          "name": "entity.name.function"
        }
      },
      "comment": "Structures, function, event definitions",
      "match": "\\b(constructor|error|using|struct|type|modifier|fallback)(\\s+[A-Za-z_]\\w*)?\\b",
      "name": "keyword"
    },
    {
      "captures": {
        "2": {
          "name": "entity.name.function"
        }
      },
      "comment": "Structures, function, event definitions",
      "match": "\\b(function)(\\s+[A-Za-z_]\\w*)?\\b",
      "name": "keyword"
    },
    {
      "captures": {
        "1": {
          "name": "markup.italic"
        }
      },
      "comment": "Special treatment for length and .selector",
      "match": "\\.(selector)\\b"
    },
    {
      "comment": "this",
      "match": "\\bthis\\b",
      "name": "markup.italic"
    },
    {
      "comment": "Special treatment for \"super\"",
      "match": "\\bsuper\\b",
      "name": "markup.italic"
    },
    {
      "captures": {
        "1": {
          "name": "constant.language"
        },
        "2": {
          "name": "constant.numeric"
        },
        "3": {
          "name": "constant.numeric"
        },
        "4": {
          "name": "keyword"
        },
        "5": {
          "name": "variable.parameter"
        }
      },
      "comment": "Built-in types function arguments",
      "match": "\\b(address(?:\\s+payable)?|string|bytes?\\d*|int\\d*|uint\\d*|bool|u?fixed\\d+x\\d+)\\s*(?:\\[(\\d*)\\])?\\s*(?:\\[(\\d*)\\])?\\s*(?:(indexed|memory|storage|calldata|payable|immutable)?\\s*(\\b[A-Za-z_]\\w*)?\\s*)?(?=[,\\)\\n])"
    },
    {
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "variable.parameter"
        }
      },
      "comment": "Other types function arguments, like structs... but can only detect them if they have a modifier, example -- function witness(instance memory w, instance memory a, instance memory a1, instance memory a1_odd, uint k)",
      "match": "\\b(?:(indexed|memory|storage|calldata|payable|immutable)\\s*(\\b[A-Za-z_]\\w*)?\\s*)(?=[,\\)\\n])"
    },
    {
      "comment": "True and false keywords",
      "match": "\\b(true|false)\\b",
      "name": "constant.language"
    },
    {
      "captures": {
        "1": {
          "name": "constant.language"
        },
        "2": {
          "name": "constant.numeric"
        },
        "3": {
          "name": "constant.numeric"
        },
        "4": {
          "name": "constant.numeric"
        },
        "5": {
          "name": "keyword"
        },
        "6": {
          "name": "keyword"
        }
      },
      "comment": "Variable definitions - bytes data; | uint x = uint(y); BUT also just appearances of basic types anywhere... good example -- \"using SafeMath for uint256;\"",
      "match": "\\b(address(?:\\s*payable)?|string|bytes?\\d*|int\\d*|uint\\d*|bool|u?fixed\\d+x\\d+)\\b(?:(?:\\s*\\[(\\d*)\\])?(?:\\s*\\[(\\d*)\\])?(?:\\s*\\[(\\d*)\\])?\\s*((?:private\\s|public\\s|internal\\s|external\\s|constant\\s|immutable\\s|memory\\s|storage\\s)*)\\s*(?:[A-Za-z_]\\w*)\\s*(\\=))?"
    },
    {
      "captures": {
        "1": {
          "name": "constant.language"
        }
      },
      "comment": "Type conversion payable(...)",
      "match": "\\b(payable)\\s*\\("
    },
    {
      "captures": {
        "1": {
          "name": "keyword"
        }
      },
      "comment": "import ... from",
      "match": "\\b(from)\\s*(?=[\\'\\\"])"
    },
    {
      "captures": {
        "1": {
          "name": "keyword"
        }
      },
      "comment": "import {Unauthorized, add as func, Point} from \"./Foo.sol\";",
      "match": "\\b(?:[A-Za-z_]\\w*)\\s+(as)\\s+(?:[A-Za-z_]\\w*)"
    },
    {
      "captures": {
        "1": {
          "name": "keyword"
        }
      },
      "comment": "import ... from",
      "match": "\\b(global);"
    },
    {
      "comment": "Langauge keywords",
      "match": "\\b(var|solidity|constant|pragma\\s*(?:experimental|abicoder)?|code|data|hex|import|const|mstruct|mapping|payable|storage|memory|calldata|if|else|for|while|do|break|continue|returns?|try|catch|private|public|pure|view|internal|immutable|external|virtual|override|abstract|suicide|emit|is|throw|revert|assert|require|receive|delete)\\b",
      "name": "keyword"
    },
    {
      "include": "#numbers"
    },
    {
      "comment": "Hexadecimal",
      "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
      "name": "constant.numeric"
    },
    {
      "comment": "Operators",
      "match": "(=|:=|!|>|<|\\||&|\\?|\\^|~|\\*|\\+|\\-|\\/|\\%)",
      "name": "keyword.operator"
    },
    {
      "comment": "Operators",
      "match": "(\\bhex\\b|\\bunicode\\b)",
      "name": "markup.italic"
    },
    {
      "comment": "Ternary colon",
      "match": "\\s\\:\\s",
      "name": "keyword.operator"
    },
    {
      "comment": "Now - it was removed in solidity 0.4 but we still include it because some old contracts use it",
      "match": "\\bnow\\b",
      "name": "support.type"
    },
    {
      "comment": "modifier placeholder statement",
      "match": "\\b_;",
      "name": "keyword"
    },
    {
      "captures": {
        "1": {
          "name": "support.type"
        },
        "2": {
          "name": "support.type"
        }
      },
      "comment": "msg and block special usage",
      "match": "\\b(msg|block|tx)\\.([A-Za-z_]\\w*)\\b"
    },
    {
      "comment": "abi functions",
      "match": "\\b(abi)\\.([A-Za-z_]\\w*)\\b",
      "name": "support.type"
    },
    {
      "captures": {
        "1": {
          "name": "support.type"
        }
      },
      "comment": "Function call - some special built-in functions",
      "match": "\\b(blockhash|gasleft)\\s*\\("
    },
    {
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "constant.numeric"
        },
        "3": {
          "name": "constant.numeric"
        }
      },
      "comment": "Function call, also for example - info.factories = new Factory[](factoryAddresses.length);",
      "match": "\\b([A-Za-z_]\\w*)(?:\\s*\\[(\\d*)\\]\\s*)?(?:\\s*\\[(\\d*)\\]\\s*)?\\("
    },
    {
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.function"
        }
      },
      "comment": "Special parameters IWETH(wavaxTokenAddress).deposit{ ... }(); ... new UniswapV3Pool{...}() https://docs.soliditylang.org/en/v0.8.11/control-structures.html#external-function-calls , https://docs.soliditylang.org/en/v0.8.11/control-structures.html#creating-contracts-via-new",
      "match": "(?:\\.|(new\\s+))([A-Za-z_]\\w*)\\{"
    },
    {
      "captures": {
        "1": {
          "name": "support.type"
        }
      },
      "comment": "Ether and time units",
      "match": "\\b(wei|gwei|ether|seconds|minutes|hours|days|weeks)\\b"
    },
    {
      "comment": "New",
      "match": "\\bnew\\b",
      "name": "keyword"
    },
    {
      "comment": "Event",
      "match": "\\banonymous\\b",
      "name": "keyword"
    },
    {
      "comment": "Unchecked",
      "match": "\\bunchecked\\b",
      "name": "keyword"
    },
    {
      "comment": "Assembly stuff",
      "match": "\\b(assembly|switch|let|case|default)\\b",
      "name": "keyword"
    },
    {
      "comment": "Strings",
      "match": "([\\\"].*?[\\\"])",
      "name": "string.quoted"
    },
    {
      "comment": "Strings",
      "match": "([\\'].*?[\\'])",
      "name": "string.quoted"
    }
  ],
  "repository": {
    "numbers": {
      "patterns": [
        {
          "comment": "Numbers, possibly with scientific notation",
          "match": "\\b(?:[+-]?\\.?\\d[\\d_eE]*)(?:\\.\\d+[\\deE]*)?\\b",
          "name": "constant.numeric"
        }
      ]
    }
  },
  "scopeName": "source.yul",
  "uuid": "8b2291ca-c768-405d-ad66-595fd5e80e03"
}
